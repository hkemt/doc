1.테이블과 컬럼생성


/* 회원정보 */
CREATE TABLE USERS (
	USER_ID VARCHAR2(20) NOT NULL, /* 아이디 */
	USER_PW VARCHAR2(20), /* 비밀번호 */
	EMAIL VARCHAR2(50), /* 이메일 */
	USER_DATE DATE /* 가입일자 */
);

COMMENT ON TABLE USERS IS '회원정보';

COMMENT ON COLUMN USERS.USER_ID IS '아이디';

COMMENT ON COLUMN USERS.USER_PW IS '비밀번호';

COMMENT ON COLUMN USERS.EMAIL IS '이메일';

COMMENT ON COLUMN USERS.USER_DATE IS '가입일자';

CREATE UNIQUE INDEX PK_USERS
	ON USERS (
		USER_ID ASC
	);

ALTER TABLE USERS
	ADD
		CONSTRAINT PK_USERS
		PRIMARY KEY (
			USER_ID
		);

/* 댓글 */
CREATE TABLE REPLY (
	REPLY_NO NUMBER NOT NULL, /* 댓글번호 */
	REPLY_CONTENT VARCHAR2(4000), /* 내용 */
	USER_ID VARCHAR2(20), /* 아이디 */
	REPLY_DATE DATE, /* 날짜 */
	BOARD_NO NUMBER /* 게시판번호 */
);

COMMENT ON TABLE REPLY IS '댓글';

COMMENT ON COLUMN REPLY.REPLY_NO IS '댓글번호';

COMMENT ON COLUMN REPLY.REPLY_CONTENT IS '내용';

COMMENT ON COLUMN REPLY.USER_ID IS '아이디';

COMMENT ON COLUMN REPLY.REPLY_DATE IS '날짜';

COMMENT ON COLUMN REPLY.BOARD_NO IS '게시판번호';

CREATE UNIQUE INDEX PK_REPLY
	ON REPLY (
		REPLY_NO ASC
	);

ALTER TABLE REPLY
	ADD
		CONSTRAINT PK_REPLY
		PRIMARY KEY (
			REPLY_NO
		);

/* 문제 */
CREATE TABLE QUESTION (
	QUESTION_NO NUMBER NOT NULL, /* 문제번호 */
	QUESTION_TYPE NUMBER, /* 유형번호 */
	QUESTION_VIDEO VARCHAR2(100) /* 동영상경로 */
);

COMMENT ON TABLE QUESTION IS '문제';

COMMENT ON COLUMN QUESTION.QUESTION_NO IS '문제번호';

COMMENT ON COLUMN QUESTION.QUESTION_TYPE IS '유형번호';

COMMENT ON COLUMN QUESTION.QUESTION_VIDEO IS '동영상경로';

CREATE UNIQUE INDEX PK_QUESTION
	ON QUESTION (
		QUESTION_NO ASC
	);

ALTER TABLE QUESTION
	ADD
		CONSTRAINT PK_QUESTION
		PRIMARY KEY (
			QUESTION_NO
		);

/* 복습 */
CREATE TABLE REVIEW (
	REVIEW_NO NUMBER NOT NULL, /* 복습번호 */
	USER_ID VARCHAR2(20), /* 아이디 */
	QUESTION_NO NUMBER /* 문제번호 */
);

COMMENT ON TABLE REVIEW IS '복습';

COMMENT ON COLUMN REVIEW.REVIEW_NO IS '복습번호';

COMMENT ON COLUMN REVIEW.USER_ID IS '아이디';

COMMENT ON COLUMN REVIEW.QUESTION_NO IS '문제번호';

CREATE UNIQUE INDEX PK_REVIEW
	ON REVIEW (
		REVIEW_NO ASC
	);

ALTER TABLE REVIEW
	ADD
		CONSTRAINT PK_REVIEW
		PRIMARY KEY (
			REVIEW_NO
		);

/* 게시판 */
CREATE TABLE BOARD (
	BOARD_NO NUMBER NOT NULL, /* 게시판번호 */
	BOARD_TITLE VARCHAR2(100), /* 제목 */
	BOARD_CONTENT VARCHAR2(4000), /* 내용 */
	USER_ID VARCHAR2(20), /* 아이디 */
	BOARD_DATE DATE, /* 날짜 */
	BOARD_COUNT NUMBER /* 조회수 */
);

COMMENT ON TABLE BOARD IS '게시판';

COMMENT ON COLUMN BOARD.BOARD_NO IS '게시판번호';

COMMENT ON COLUMN BOARD.BOARD_TITLE IS '제목';

COMMENT ON COLUMN BOARD.BOARD_CONTENT IS '내용';

COMMENT ON COLUMN BOARD.USER_ID IS '아이디';

COMMENT ON COLUMN BOARD.BOARD_DATE IS '날짜';

COMMENT ON COLUMN BOARD.BOARD_COUNT IS '조회수';

CREATE UNIQUE INDEX PK_BOARD
	ON BOARD (
		BOARD_NO ASC
	);

ALTER TABLE BOARD
	ADD
		CONSTRAINT PK_BOARD
		PRIMARY KEY (
			BOARD_NO
		);

/* 공지사항 */
CREATE TABLE NOTICE (
	NOTICE_NO NUMBER NOT NULL, /* 공지번호 */
	BOARD_NO NUMBER /* 게시판번호 */
);

COMMENT ON TABLE NOTICE IS '공지사항';

COMMENT ON COLUMN NOTICE.NOTICE_NO IS '공지번호';

COMMENT ON COLUMN NOTICE.BOARD_NO IS '게시판번호';

CREATE UNIQUE INDEX PK_NOTICE
	ON NOTICE (
		NOTICE_NO ASC
	);

ALTER TABLE NOTICE
	ADD
		CONSTRAINT PK_NOTICE
		PRIMARY KEY (
			NOTICE_NO
		);

ALTER TABLE REPLY
	ADD
		CONSTRAINT FK_USERS_TO_REPLY
		FOREIGN KEY (
			USER_ID
		)
		REFERENCES USERS (
			USER_ID
		);

ALTER TABLE REPLY
	ADD
		CONSTRAINT FK_BOARD_TO_REPLY
		FOREIGN KEY (
			BOARD_NO
		)
		REFERENCES BOARD (
			BOARD_NO
		);

ALTER TABLE REVIEW
	ADD
		CONSTRAINT FK_USERS_TO_REVIEW
		FOREIGN KEY (
			USER_ID
		)
		REFERENCES USERS (
			USER_ID
		);

ALTER TABLE REVIEW
	ADD
		CONSTRAINT FK_QUESTION_TO_REVIEW
		FOREIGN KEY (
			QUESTION_NO
		)
		REFERENCES QUESTION (
			QUESTION_NO
		);

ALTER TABLE BOARD
	ADD
		CONSTRAINT FK_USERS_TO_BOARD
		FOREIGN KEY (
			USER_ID
		)
		REFERENCES USERS (
			USER_ID
		);

ALTER TABLE NOTICE
	ADD
		CONSTRAINT FK_BOARD_TO_NOTICE
		FOREIGN KEY (
			BOARD_NO
		)
		REFERENCES BOARD (
			BOARD_NO
		);


2. 시퀀스 5개 생성

CREATE SEQUENCE  "EMT"."SEQ_BOARD_NO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

CREATE SEQUENCE  "EMT"."SEQ_NOTICE_NO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

CREATE SEQUENCE  "EMT"."SEQ_QUESTION_NO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

CREATE SEQUENCE  "EMT"."SEQ_REPLY_NO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

CREATE SEQUENCE  "EMT"."SEQ_REVIEW_NO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
